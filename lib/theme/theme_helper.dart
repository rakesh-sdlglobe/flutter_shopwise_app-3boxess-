import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_staggered_animations/flutter_staggered_animations.dart';
import 'package:fluttertoast/fluttertoast.dart';
import '../../core/app_export.dart';
import '../core/utils/phone_field/intl_phone_field.dart';
import '../core/utils/phone_field/phone_number.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.lightGreen800,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              9,
            ),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Color(0XFFFFFFFF),
          shape: RoundedRectangleBorder(
            side: BorderSide(
              color: colorScheme.primary,
              width: 1,
            ),
            borderRadius: BorderRadius.circular(
              12,
            ),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray300,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray700,
          fontSize: getFontSize(
            12,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            28,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            24,
          ),
          fontFamily: 'Gilroy',
          fontWeight: FontWeight.w400,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            22,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            18,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF000000),
    primaryContainer: Color(0XFFEBC79D),
    secondary: Color(0XFFEBC79D),
    secondaryContainer: Color(0X19553236),
    tertiary: Color(0XFFEBC79D),
    tertiaryContainer: Color(0X19553236),

    // Background colors
    background: Color(0XFFEBC79D),

    // Surface colors
    surface: Color(0XFFEBC79D),
    surfaceTint: Color(0XFFFFFFFF),
    surfaceVariant: Color(0X19553236),

    // Error colors
    error: Color(0XFFFFFFFF),
    errorContainer: Color(0XFF6B5D0E),
    onError: Color(0XFF292D32),
    onErrorContainer: Color(0XFFFFFFFF),

    // On colors(text colors)
    onBackground: Color(0XFF002987),
    onInverseSurface: Color(0XFF292D32),
    onPrimary: Color(0XFFFFFFFF),
    onPrimaryContainer: Color(0XFF002987),
    onSecondary: Color(0XFF002987),
    onSecondaryContainer: Color(0XFFFFFFFF),
    onTertiary: Color(0XFF002987),
    onTertiaryContainer: Color(0XFFFFFFFF),

    // Other colors
    outline: Color(0XFFFFFFFF),
    outlineVariant: Color(0XFFEBC79D),
    scrim: Color(0XFFEBC79D),
    shadow: Color(0XFFFFFFFF),

    // Inverse colors
    inversePrimary: Color(0XFFEBC79D),
    inverseSurface: Color(0XFFFFFFFF),

    // Pending colors
    onSurface: Color(0XFF002987),
    onSurfaceVariant: Color(0XFFFFFFFF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  //secondary color
  Color get secondaryColor => Color(0XFFF3F3F3);

  Color get disableSliderIndicaterColorColor => Color(0XFFB3B3B3);

  // Amber
  Color get amber500 => Color(0XFFFFC107);

  Color get amber700 => Color(0XFFDB9E00);

  Color get amberA700 => Color(0XFFF1A80F);

  Color get splashColor => Color(0XFFFAFAFA);

  Color get buttonColor => Color(0XFF000000);

  Color get shopbuttonTextColor => Color(0XFF089A16);

//0F4A99
  // Black
  Color get black900 => Color(0XFF000000);

  Color get black10 => Color(0XFFF4F4F4);

  Color get black40 => Color(0XFF696969);

  Color get black30 => Color(0XFFC0C0C0);

  Color get black20 => Color(0XFFDCDCDC);

  // Blue
  Color get blue800 => Color(0XFF226FA7);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);

  Color get blueGray400 => Color(0XFF888888);

  Color get blueGray50 => Color(0XFFF1F1F1);

  Color get blueGray900 => Color(0XFF333333);

  // DeepOrange
  Color get deepOrange100 => Color(0XFFF9B1B1);

  // Gray
  // Color get gray100 => Color(0XFFF4F4F4);
  Color get white => Color(0XFFFFFFFF);

  Color get gray10001 => Color(0XFFF8F8F8);

  Color get gray10002 => Color(0XFFF7F7F7);

  Color get gray200 => Color(0XFFF0EEEE);

  Color get gray20 => Color(0XFFDCDCDC);

  Color get gray300 => Color(0XFFDBDBDB);

  Color get gray400 => Color(0XFFC0BFBF);

  Color get gray100 => Color(0XFFFAFAFA);

  Color get gray500 => Color(0XFFB19679);

  Color get gray600 => Color(0XFF7F7F7F);

  Color get gray700 => Color(0XFF696969);

  Color get gray800 => Color(0XFF0F4A99);

  Color get gray => Color(0XFFF1F1F1);

  //yellow

  // Green
  Color get green400 => Color(0XFF65BC6A);

  Color get green700 => Color(0XFF40744D);

  Color get green800 => Color(0XFF079A16);

  Color get greenA700 => Color(0XFF04B155);

  Color get green => Color(0XFF469F1D);

  // Indigo
  Color get indigo800 => Color(0XFF283593);

  Color get indigoA200 => Color(0XFF635BFF);

  // LightGreen
  Color get lightGreen100 => Color(0XFFE4EED7);

  Color get lightGreen200 => Color(0XFFDBD195);

  Color get lightGreen50 => Color(0XFFEEFBF0);

  Color get lightGreen800 => Color(0XFF469F1C);

  // Lime
  Color get lime100 => Color(0XFFF1E0CD);

  Color get lime10001 => Color(0XFFEEE7C0);

  Color get lime900 => Color(0XFF6B5D0F);

  // Orange
  Color get orange50 => Color(0XFFFFF4E0);

  // Red
  Color get red50 => Color(0XFFFFF3F3);

  Color get red500 => Color(0XFFF14336);

  Color get red50001 => Color(0XFFFF3D3D);

  Color get errorColor => Color(0XFFFF3E3E);

  // Teal
  Color get teal100 => Color(0XFFB1E2CA);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();

ThemeData get theme => ThemeHelper().themeData();

closeApp() {
  Future.delayed(const Duration(milliseconds: 1000), () {
    SystemNavigator.pop();
  });
}

void showCustomToast(String texts) {
  Fluttertoast.showToast(
    msg: texts,
    toastLength: Toast.LENGTH_LONG,
    gravity: ToastGravity.BOTTOM,
    timeInSecForIosWeb: 1,
    backgroundColor: appTheme.secondaryColor,
    textColor: appTheme.buttonColor,
    fontSize: getFontSize(12),
  );
}

// ignore: non_constant_identifier_names
Widget phone_number_field(
    controller, FutureOr<String?> Function(PhoneNumber?)? validator) {
  return IntlPhoneField(
    controller: controller,
    disableLengthCheck: true,
    showCountryFlag: false,
    flagsButtonMargin:
        EdgeInsets.only(left: 16, top: 12, bottom: 12, right: 14),
    style: theme.textTheme.bodyLarge,
    dropdownTextStyle: TextStyle(
      color: appTheme.black40,
      fontSize: getFontSize(
        16,
      ),
      fontFamily: 'SF Pro Display',
      fontWeight: FontWeight.w400,
    ),
    cursorColor: theme.colorScheme.primary,
    dropdownIconPosition: IconPosition.trailing,
    dropdownDecoration: BoxDecoration(
        border: Border(right: BorderSide(color: appTheme.gray300))),
    dropdownIcon: Icon(
      Icons.keyboard_arrow_down_outlined,
      color: appTheme.black900,
    ),
    validator: validator,

    //     (p0) {
    //   if (p0 == null || p0.number.isEmpty) {
    //     return "Enter valid number";
    //   }
    //   return null;
    // },
    decoration: InputDecoration(
      floatingLabelStyle: CustomTextStyles.bodyMedium_1,
      labelStyle: CustomTextStyles.bodyHintStyle,
      contentPadding: EdgeInsets.zero,
      errorStyle: CustomTextStyles.bodyErrorStyle,
      // labelStyle: TextStyle(
      //   color: ColorConstant.black900,
      //   fontSize: getFontSize(
      //     13,
      //   ),
      //   fontFamily: 'Outfit',
      //   fontWeight: FontWeight.w400,
      // ),
      labelText: "Phone number",
      // label: Text(
      //   "Phone number",
      //   style: TextStyle(
      //     color: ColorConstant.black900,
      //     fontSize: getFontSize(
      //       16,
      //     ),
      //     fontFamily: 'SF Pro Display',
      //     fontWeight: FontWeight.w400,
      //   ),
      // ),
      // label: Align(alignment: Alignment.topLeft,child: Text("Phone number",textAlign: TextAlign.left,)),
      hintText: "Phone number",
      hintStyle: CustomTextStyles.bodyHintStyle,
      errorBorder: OutlineInputBorder(
        borderRadius: BorderRadius.all(Radius.circular(getHorizontalSize(16))),
        borderSide: BorderSide(
          color: appTheme.errorColor,
          width: 1,
        ),
      ),
      focusedErrorBorder: OutlineInputBorder(
        borderRadius: BorderRadius.all(Radius.circular(getHorizontalSize(16))),
        borderSide: BorderSide(
          color: appTheme.gray700,
          width: 1,
        ),
      ),
      enabledBorder: OutlineInputBorder(
        borderRadius: BorderRadius.all(Radius.circular(getHorizontalSize(16))),
        borderSide: BorderSide(
          color: appTheme.gray300,
          width: 1,
        ),
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.all(Radius.circular(getHorizontalSize(16))),
        borderSide: BorderSide(
          color: appTheme.buttonColor,
          width: 1,
        ),
      ),

      border: OutlineInputBorder(
        borderSide: BorderSide(),
      ),
    ),
    initialCountryCode: 'IN',
    onChanged: (phone) {
      print(phone.completeNumber);
    },
  );
}

Widget animationFunction(index, child,
    {Duration? listAnimation, Duration? slideduration, Duration? slidedelay}) {
  return AnimationConfiguration.staggeredList(
    position: index,
    duration: listAnimation ?? Duration(milliseconds: 375),
    child: SlideAnimation(
      duration: slideduration ?? Duration(milliseconds: 50),
      delay: slidedelay ?? Duration(milliseconds: 50),
      child: FadeInAnimation(
        child: child,
      ),
    ),
  );
}
